[{"categories":["Security"],"check_name":"Insecure Dependency","content":{"body":"**Advisory**: CVE-2016-10173\n\n**URL**: https://github.com/halostatue/minitar/issues/16\n\n**Solution**: upgrade to \u003e= 0.6.1"},"description":"Minitar Directory Traversal Vulnerability","location":{"path":"Gemfile.lock","lines":{"begin":84,"end":84}},"remediation_points":5000000,"severity":"minor","type":"Issue","fingerprint":"23b5fcc5cfa994a398426c594a20be79","engine_name":"bundler-audit"},
{"categories":["Security"],"check_name":"Insecure Dependency","content":{"body":"**Advisory**: CVE-2017-5946\n\n**URL**: https://github.com/rubyzip/rubyzip/issues/315\n\n**Solution**: upgrade to \u003e= 1.2.1"},"description":"Directory traversal vulnerability in rubyzip","location":{"path":"Gemfile.lock","lines":{"begin":117,"end":117}},"remediation_points":5000000,"severity":"minor","type":"Issue","fingerprint":"5d9180d6788e9bcaebefcef9a0234105","engine_name":"bundler-audit"},
{"type":"issue","check_name":"Similar code","description":"Similar code found in 1 other location (mass = 25)","categories":["Duplication"],"location":{"path":"lib/logstash/inputs/gelf.rb","lines":{"begin":243,"end":246}},"remediation_points":2200000,"other_locations":[{"path":"lib/logstash/inputs/gelf.rb","lines":{"begin":252,"end":255}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n\u003e Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 25**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"a23e4c9de3934d4728159eacf1617928","severity":"minor","engine_name":"duplication"},
{"type":"issue","check_name":"Similar code","description":"Similar code found in 1 other location (mass = 25)","categories":["Duplication"],"location":{"path":"lib/logstash/inputs/gelf.rb","lines":{"begin":252,"end":255}},"remediation_points":2200000,"other_locations":[{"path":"lib/logstash/inputs/gelf.rb","lines":{"begin":243,"end":246}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n\u003e Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 25**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"a23e4c9de3934d4728159eacf1617928","severity":"minor","engine_name":"duplication"},
{"type":"Issue","check_name":"Rubocop/Lint/EndAlignment","description":"`end` at 133, 12 is not aligned with `if` at 130, 13.","categories":["Style"],"remediation_points":50000,"location":{"path":"lib/logstash/inputs/gelf.rb","positions":{"begin":{"column":13,"line":133},"end":{"column":16,"line":133}}},"content":{"body":"This cop checks whether the end keywords are aligned properly.\n\nThree modes are supported through the `AlignWith` configuration\nparameter:\n\nIf it's set to `keyword` (which is the default), the `end`\nshall be aligned with the start of the keyword (if, class, etc.).\n\nIf it's set to `variable` the `end` shall be aligned with the\nleft-hand-side of the variable assignment, if there is one.\n\nIf it's set to `start_of_line`, the `end` shall be aligned with the\nstart of the line where the matching keyword appears.\n\n### Example:\n    # good\n    # keyword style\n    variable = if true\n               end\n\n    # variable style\n    variable = if true\n    end\n\n    # start_of_line style\n    puts(if true\n    end)"},"fingerprint":"4ea4670d9ba1479cef5e9290b0f1f6e8","severity":"minor","engine_name":"rubocop"},
{"type":"Issue","check_name":"Rubocop/Lint/HandleExceptions","description":"Do not suppress exceptions.","categories":["Style"],"remediation_points":50000,"location":{"path":"lib/logstash/inputs/gelf.rb","positions":{"begin":{"column":3,"line":105},"end":{"column":17,"line":105}}},"fingerprint":"c6e86a939a703b4f1d95da804a6a070d","severity":"minor","engine_name":"rubocop"},
{"type":"Issue","check_name":"Rubocop/Lint/UselessAccessModifier","description":"Useless `public` access modifier.","categories":["Style"],"remediation_points":50000,"location":{"path":"lib/logstash/inputs/gelf.rb","positions":{"begin":{"column":3,"line":70},"end":{"column":9,"line":70}}},"content":{"body":"This cop checks for redundant access modifiers, including those with no\ncode, those which are repeated, and leading `public` modifiers in a\nclass or module body. Conditionally-defined methods are considered as\nalways being defined, and thus access modifiers guarding such methods\nare not redundant.\n\n### Example:\n\n    class Foo\n      public # this is redundant (default access is public)\n\n      def method\n      end\n\n      private # this is not redundant (a method is defined)\n      def method2\n      end\n\n      private # this is redundant (no following methods are defined)\n    end\n\n### Example:\n\n    class Foo\n      # The following is not redundant (conditionally defined methods are\n      # considered as always defining a method)\n      private\n\n      if condition?\n        def method\n        end\n      end\n\n      protected # this is not redundant (method is defined)\n\n      define_method(:method2) do\n      end\n\n      protected # this is redundant (repeated from previous modifier)\n\n      [1,2,3].each do |i|\n        define_method(\"foo#{i}\") do\n        end\n      end\n\n      # The following is redundant (methods defined on the class'\n      # singleton class are not affected by the public modifier)\n      public\n\n      def self.method3\n      end\n    end\n\n### Example:\n    # Lint/UselessAccessModifier:\n    #   ContextCreatingMethods:\n    #     - concerning\n    require 'active_support/concern'\n    class Foo\n      concerning :Bar do\n        def some_public_method\n        end\n\n        private\n\n        def some_private_method\n        end\n      end\n\n      # this is not redundant because `concerning` created its own context\n      private\n\n      def some_other_private_method\n      end\n    end"},"fingerprint":"2d9ba0aa71f044307d668289656605e9","severity":"minor","engine_name":"rubocop"},
{"type":"Issue","check_name":"Rubocop/Lint/UselessAccessModifier","description":"Useless `public` access modifier.","categories":["Style"],"remediation_points":50000,"location":{"path":"lib/logstash/inputs/gelf.rb","positions":{"begin":{"column":3,"line":76},"end":{"column":9,"line":76}}},"content":{"body":"This cop checks for redundant access modifiers, including those with no\ncode, those which are repeated, and leading `public` modifiers in a\nclass or module body. Conditionally-defined methods are considered as\nalways being defined, and thus access modifiers guarding such methods\nare not redundant.\n\n### Example:\n\n    class Foo\n      public # this is redundant (default access is public)\n\n      def method\n      end\n\n      private # this is not redundant (a method is defined)\n      def method2\n      end\n\n      private # this is redundant (no following methods are defined)\n    end\n\n### Example:\n\n    class Foo\n      # The following is not redundant (conditionally defined methods are\n      # considered as always defining a method)\n      private\n\n      if condition?\n        def method\n        end\n      end\n\n      protected # this is not redundant (method is defined)\n\n      define_method(:method2) do\n      end\n\n      protected # this is redundant (repeated from previous modifier)\n\n      [1,2,3].each do |i|\n        define_method(\"foo#{i}\") do\n        end\n      end\n\n      # The following is redundant (methods defined on the class'\n      # singleton class are not affected by the public modifier)\n      public\n\n      def self.method3\n      end\n    end\n\n### Example:\n    # Lint/UselessAccessModifier:\n    #   ContextCreatingMethods:\n    #     - concerning\n    require 'active_support/concern'\n    class Foo\n      concerning :Bar do\n        def some_public_method\n        end\n\n        private\n\n        def some_private_method\n        end\n      end\n\n      # this is not redundant because `concerning` created its own context\n      private\n\n      def some_other_private_method\n      end\n    end"},"fingerprint":"2d9ba0aa71f044307d668289656605e9","severity":"minor","engine_name":"rubocop"},
{"type":"Issue","check_name":"Rubocop/Lint/UselessAccessModifier","description":"Useless `public` access modifier.","categories":["Style"],"remediation_points":50000,"location":{"path":"lib/logstash/inputs/gelf.rb","positions":{"begin":{"column":3,"line":83},"end":{"column":9,"line":83}}},"content":{"body":"This cop checks for redundant access modifiers, including those with no\ncode, those which are repeated, and leading `public` modifiers in a\nclass or module body. Conditionally-defined methods are considered as\nalways being defined, and thus access modifiers guarding such methods\nare not redundant.\n\n### Example:\n\n    class Foo\n      public # this is redundant (default access is public)\n\n      def method\n      end\n\n      private # this is not redundant (a method is defined)\n      def method2\n      end\n\n      private # this is redundant (no following methods are defined)\n    end\n\n### Example:\n\n    class Foo\n      # The following is not redundant (conditionally defined methods are\n      # considered as always defining a method)\n      private\n\n      if condition?\n        def method\n        end\n      end\n\n      protected # this is not redundant (method is defined)\n\n      define_method(:method2) do\n      end\n\n      protected # this is redundant (repeated from previous modifier)\n\n      [1,2,3].each do |i|\n        define_method(\"foo#{i}\") do\n        end\n      end\n\n      # The following is redundant (methods defined on the class'\n      # singleton class are not affected by the public modifier)\n      public\n\n      def self.method3\n      end\n    end\n\n### Example:\n    # Lint/UselessAccessModifier:\n    #   ContextCreatingMethods:\n    #     - concerning\n    require 'active_support/concern'\n    class Foo\n      concerning :Bar do\n        def some_public_method\n        end\n\n        private\n\n        def some_private_method\n        end\n      end\n\n      # this is not redundant because `concerning` created its own context\n      private\n\n      def some_other_private_method\n      end\n    end"},"fingerprint":"2d9ba0aa71f044307d668289656605e9","severity":"minor","engine_name":"rubocop"},
{"type":"Issue","check_name":"Rubocop/Lint/UselessAccessModifier","description":"Useless `public` access modifier.","categories":["Style"],"remediation_points":50000,"location":{"path":"lib/logstash/inputs/gelf.rb","positions":{"begin":{"column":3,"line":102},"end":{"column":9,"line":102}}},"content":{"body":"This cop checks for redundant access modifiers, including those with no\ncode, those which are repeated, and leading `public` modifiers in a\nclass or module body. Conditionally-defined methods are considered as\nalways being defined, and thus access modifiers guarding such methods\nare not redundant.\n\n### Example:\n\n    class Foo\n      public # this is redundant (default access is public)\n\n      def method\n      end\n\n      private # this is not redundant (a method is defined)\n      def method2\n      end\n\n      private # this is redundant (no following methods are defined)\n    end\n\n### Example:\n\n    class Foo\n      # The following is not redundant (conditionally defined methods are\n      # considered as always defining a method)\n      private\n\n      if condition?\n        def method\n        end\n      end\n\n      protected # this is not redundant (method is defined)\n\n      define_method(:method2) do\n      end\n\n      protected # this is redundant (repeated from previous modifier)\n\n      [1,2,3].each do |i|\n        define_method(\"foo#{i}\") do\n        end\n      end\n\n      # The following is redundant (methods defined on the class'\n      # singleton class are not affected by the public modifier)\n      public\n\n      def self.method3\n      end\n    end\n\n### Example:\n    # Lint/UselessAccessModifier:\n    #   ContextCreatingMethods:\n    #     - concerning\n    require 'active_support/concern'\n    class Foo\n      concerning :Bar do\n        def some_public_method\n        end\n\n        private\n\n        def some_private_method\n        end\n      end\n\n      # this is not redundant because `concerning` created its own context\n      private\n\n      def some_other_private_method\n      end\n    end"},"fingerprint":"2d9ba0aa71f044307d668289656605e9","severity":"minor","engine_name":"rubocop"},
{"type":"Issue","check_name":"Rubocop/Lint/UselessAccessModifier","description":"Useless `private` access modifier.","categories":["Style"],"remediation_points":50000,"location":{"path":"lib/logstash/inputs/gelf.rb","positions":{"begin":{"column":3,"line":180},"end":{"column":10,"line":180}}},"content":{"body":"This cop checks for redundant access modifiers, including those with no\ncode, those which are repeated, and leading `public` modifiers in a\nclass or module body. Conditionally-defined methods are considered as\nalways being defined, and thus access modifiers guarding such methods\nare not redundant.\n\n### Example:\n\n    class Foo\n      public # this is redundant (default access is public)\n\n      def method\n      end\n\n      private # this is not redundant (a method is defined)\n      def method2\n      end\n\n      private # this is redundant (no following methods are defined)\n    end\n\n### Example:\n\n    class Foo\n      # The following is not redundant (conditionally defined methods are\n      # considered as always defining a method)\n      private\n\n      if condition?\n        def method\n        end\n      end\n\n      protected # this is not redundant (method is defined)\n\n      define_method(:method2) do\n      end\n\n      protected # this is redundant (repeated from previous modifier)\n\n      [1,2,3].each do |i|\n        define_method(\"foo#{i}\") do\n        end\n      end\n\n      # The following is redundant (methods defined on the class'\n      # singleton class are not affected by the public modifier)\n      public\n\n      def self.method3\n      end\n    end\n\n### Example:\n    # Lint/UselessAccessModifier:\n    #   ContextCreatingMethods:\n    #     - concerning\n    require 'active_support/concern'\n    class Foo\n      concerning :Bar do\n        def some_public_method\n        end\n\n        private\n\n        def some_private_method\n        end\n      end\n\n      # this is not redundant because `concerning` created its own context\n      private\n\n      def some_other_private_method\n      end\n    end"},"fingerprint":"27e0494198f52954e42930b15b73e30e","severity":"minor","engine_name":"rubocop"},
{"type":"Issue","check_name":"Rubocop/Lint/UselessAccessModifier","description":"Useless `private` access modifier.","categories":["Style"],"remediation_points":50000,"location":{"path":"lib/logstash/inputs/gelf.rb","positions":{"begin":{"column":3,"line":263},"end":{"column":10,"line":263}}},"content":{"body":"This cop checks for redundant access modifiers, including those with no\ncode, those which are repeated, and leading `public` modifiers in a\nclass or module body. Conditionally-defined methods are considered as\nalways being defined, and thus access modifiers guarding such methods\nare not redundant.\n\n### Example:\n\n    class Foo\n      public # this is redundant (default access is public)\n\n      def method\n      end\n\n      private # this is not redundant (a method is defined)\n      def method2\n      end\n\n      private # this is redundant (no following methods are defined)\n    end\n\n### Example:\n\n    class Foo\n      # The following is not redundant (conditionally defined methods are\n      # considered as always defining a method)\n      private\n\n      if condition?\n        def method\n        end\n      end\n\n      protected # this is not redundant (method is defined)\n\n      define_method(:method2) do\n      end\n\n      protected # this is redundant (repeated from previous modifier)\n\n      [1,2,3].each do |i|\n        define_method(\"foo#{i}\") do\n        end\n      end\n\n      # The following is redundant (methods defined on the class'\n      # singleton class are not affected by the public modifier)\n      public\n\n      def self.method3\n      end\n    end\n\n### Example:\n    # Lint/UselessAccessModifier:\n    #   ContextCreatingMethods:\n    #     - concerning\n    require 'active_support/concern'\n    class Foo\n      concerning :Bar do\n        def some_public_method\n        end\n\n        private\n\n        def some_private_method\n        end\n      end\n\n      # this is not redundant because `concerning` created its own context\n      private\n\n      def some_other_private_method\n      end\n    end"},"fingerprint":"27e0494198f52954e42930b15b73e30e","severity":"minor","engine_name":"rubocop"},
{"type":"Issue","check_name":"Rubocop/Lint/UselessAccessModifier","description":"Useless `private` access modifier.","categories":["Style"],"remediation_points":50000,"location":{"path":"lib/logstash/inputs/gelf.rb","positions":{"begin":{"column":3,"line":277},"end":{"column":10,"line":277}}},"content":{"body":"This cop checks for redundant access modifiers, including those with no\ncode, those which are repeated, and leading `public` modifiers in a\nclass or module body. Conditionally-defined methods are considered as\nalways being defined, and thus access modifiers guarding such methods\nare not redundant.\n\n### Example:\n\n    class Foo\n      public # this is redundant (default access is public)\n\n      def method\n      end\n\n      private # this is not redundant (a method is defined)\n      def method2\n      end\n\n      private # this is redundant (no following methods are defined)\n    end\n\n### Example:\n\n    class Foo\n      # The following is not redundant (conditionally defined methods are\n      # considered as always defining a method)\n      private\n\n      if condition?\n        def method\n        end\n      end\n\n      protected # this is not redundant (method is defined)\n\n      define_method(:method2) do\n      end\n\n      protected # this is redundant (repeated from previous modifier)\n\n      [1,2,3].each do |i|\n        define_method(\"foo#{i}\") do\n        end\n      end\n\n      # The following is redundant (methods defined on the class'\n      # singleton class are not affected by the public modifier)\n      public\n\n      def self.method3\n      end\n    end\n\n### Example:\n    # Lint/UselessAccessModifier:\n    #   ContextCreatingMethods:\n    #     - concerning\n    require 'active_support/concern'\n    class Foo\n      concerning :Bar do\n        def some_public_method\n        end\n\n        private\n\n        def some_private_method\n        end\n      end\n\n      # this is not redundant because `concerning` created its own context\n      private\n\n      def some_other_private_method\n      end\n    end"},"fingerprint":"27e0494198f52954e42930b15b73e30e","severity":"minor","engine_name":"rubocop"},
{"type":"Issue","check_name":"Rubocop/Lint/UselessAssignment","description":"Useless assignment to variable - `client`.","categories":["Style"],"remediation_points":50000,"location":{"path":"lib/logstash/inputs/gelf.rb","positions":{"begin":{"column":13,"line":172},"end":{"column":19,"line":172}}},"content":{"body":"This cop checks for every useless assignment to local variable in every\nscope.\nThe basic idea for this cop was from the warning of `ruby -cw`:\n\n    assigned but unused variable - foo\n\nCurrently this cop has advanced logic that detects unreferenced\nreassignments and properly handles varied cases such as branch, loop,\nrescue, ensure, etc."},"fingerprint":"545e0ffdda76287dfeab3abaa3158072","severity":"minor","engine_name":"rubocop"},
{"type":"Issue","check_name":"Rubocop/Metrics/CyclomaticComplexity","description":"Cyclomatic complexity for tcp_listener is too high. [20/6]","categories":["Complexity"],"remediation_points":1980000,"location":{"path":"lib/logstash/inputs/gelf.rb","positions":{"begin":{"column":3,"line":109},"end":{"column":6,"line":178}}},"content":{"body":"This cop checks that the cyclomatic complexity of methods is not higher\nthan the configured maximum. The cyclomatic complexity is the number of\nlinearly independent paths through a method. The algorithm counts\ndecision points and adds one.\n\nAn if statement (or unless or ?:) increases the complexity by one. An\nelse branch does not, since it doesn't add a decision point. The \u0026\u0026\noperator (or keyword and) can be converted to a nested if statement,\nand ||/or is shorthand for a sequence of ifs, so they also add one.\nLoops can be said to have an exit condition, so they add one."},"fingerprint":"e3f481e0df99e17419c7bf6cfa5e52ec","severity":"minor","engine_name":"rubocop"},
{"type":"Issue","check_name":"Rubocop/Metrics/CyclomaticComplexity","description":"Cyclomatic complexity for udp_listener is too high. [7/6]","categories":["Complexity"],"remediation_points":1070000,"location":{"path":"lib/logstash/inputs/gelf.rb","positions":{"begin":{"column":3,"line":181},"end":{"column":6,"line":209}}},"content":{"body":"This cop checks that the cyclomatic complexity of methods is not higher\nthan the configured maximum. The cyclomatic complexity is the number of\nlinearly independent paths through a method. The algorithm counts\ndecision points and adds one.\n\nAn if statement (or unless or ?:) increases the complexity by one. An\nelse branch does not, since it doesn't add a decision point. The \u0026\u0026\noperator (or keyword and) can be converted to a nested if statement,\nand ||/or is shorthand for a sequence of ifs, so they also add one.\nLoops can be said to have an exit condition, so they add one."},"fingerprint":"b2562590f00351aca9228da1001d6d27","severity":"minor","engine_name":"rubocop"},
{"type":"Issue","check_name":"Rubocop/Metrics/MethodLength","description":"Method has too many lines. [53/30]","categories":["Complexity"],"remediation_points":2610000,"location":{"path":"lib/logstash/inputs/gelf.rb","positions":{"begin":{"column":3,"line":109},"end":{"column":6,"line":178}}},"content":{"body":"This cop checks if the length of a method exceeds some maximum value.\nComment lines can optionally be ignored.\nThe maximum allowed length is configurable."},"fingerprint":"a44093aa3b189283c9b4a63c0ac7ff10","severity":"minor","engine_name":"rubocop"}]
